fn is_valid_number(s: String) -> bool {
    // First check if it can be parsed as a float and is positive
    if let Ok(n) = s.trim().parse::<f64>() {
        if n > 0.0 {
            // Split into the part before and after the decimal
            let parts: Vec<&str> = s.split('.').collect();
            
            // Check the number of digits before the decimal
            if parts[0].len() > 9 {
                return false;
            }
            
            // Check the number of digits after the decimal (if any)
            if parts.len() == 2 && parts[1].len() > 3 {
                return false;
            }
            
            return true;
        }
    }
    
    false
}

fn main() {
    let test_cases = vec![
        String::from("123456789"),      // valid
        String::from("1234567890"),     // invalid: more than 9 digits before decimal
        String::from("123456.789"),     // valid
        String::from("123456789.123"),  // valid
        String::from("123456789.1234"), // invalid: more than 3 digits after decimal
        String::from("-123456789"),     // invalid: negative number
        String::from("hello"),          // invalid: not a number
    ];
    
    for test in test_cases {
        println!("{}: {}", test, is_valid_number(test.clone()));
    }
}
